.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TermExtract::Calc_Imp 3pm"
.TH TermExtract::Calc_Imp 3pm "2005-07-14" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
.Vb 1
\&    TermExtract::Calc_Imp \-\- 専門用語重要語計算モジュール
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use TermExtract::Calc_Imp;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 10
\&    TermExtract はテキストデータから、専門用語を取り出すためのPerlモジュ
\&  ールである。
\&    「茶筅」、「和布蕪」などの形態素解析ソフトや"Brill\(aqs Tagger"などの英
\&  文の品詞タグ付けソフトの処理結果、もしくは文章そのものを入力とし、複合
\&  語（もしくは単語）の生成と、その重要度の計算と重要度順の並び替えを行う。
\&    「茶筅」などからの複合語の生成は、このCalc_Impの子クラスで定義される
\&  メソッド get_imp_word で処理し、Calc_Imp本体は用語の重要度の計算と重要
\&  度順のリストの生成のみを行う。これにより、子クラスを新規に用意すること
\&  で、多種の形態素解析ソフト等への対応を可能にしている。また、このこのモ
\&　ジュールは入力となる文字コードによらず動作する。
.Ve
.PP
.Vb 1
\&    重要度計算は、次のとおり行う。
.Ve
.PP
.Vb 7
\&    このモジュールでの専門用語は、単語そのものか、複数の単語を組み合わせ
\&  て作られる。この複合語を構成する最小単位の名詞を特に「単名詞」と呼ぶ。
\&  この単名詞が他の単名詞と連結して複合語をなすことが多いほど、重要な概念
\&  を表すと考える。
\&　  簡単な例で、「情報科学技術」を考えてみる。この語は、次のとおり３つの
\&  単名詞に分割できる。この際、それぞれの単名詞が他の単名詞とどれだけ結び
\&  つくか統計的にわかっているとする。
.Ve
.PP
.Vb 5
\&   単名詞　　前の語に連結した回数　　後の語に連結した回数
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  「情報」　　　　　１　　　　　　　　　　　　　　　２
\&  「科学」　　　　　２　　　　　　　　　　　　　　　３
\&  「技術」　　　　　１　　　　　　　　　　　　　　　１
.Ve
.PP
.Vb 4
\&    複合語全体の重要度はこれらの６つ（単名詞数ｘ２）の数値の平均から求め
\&  る。このモジュールでは平均を相乗平均でとるようにした。
\&  （正確には相乗平均をとる際、０回の単名詞を扱う関係から１を加算した値の
\&    相乗平均を用いる）
.Ve
.PP
.Vb 3
\&    前述のとおり、Calc_Impは子クラスでメソッド get_noun_frq をオーバーラ
\&  イドすることで動作する。
\&    そのメソッド get_noun_frq の入出力仕様は次のとおり。
.Ve
.PP
.Vb 3
\&    引数
\&        第１引数 \-\-\-\-  オブジェクト
\&        第２引数以下は任意に定義可能
.Ve
.PP
.Vb 2
\&    戻り値
\&        次のキーと値からなるハッシュリファレンスを返すこと
.Ve
.PP
.Vb 2
\&        キー  \-\-\-\-  単名詞を半角スペースで区切り表示した複合語
\&                  （例　"航空 工業 デザイン"）
.Ve
.PP
.Vb 1
\&        値    \-\-\-\-  文中のキー（複合語）の出現回数
.Ve
.PP
.Vb 2
\&      なお、キーの上限サイズは１Ｋバイトとし、それ以上の場合は異常とみ
\&    なし、無視するようにした。
.Ve
.PP
.Vb 5
\&      また、日本語や中国語のように単名詞が１字空けで表記されない言語
\&    （膠着言語や孤立語）の場合には、get_noun_frq内で次のメソッドを実行
\&    すること。これにより、アルファベット以外の単名詞は１字空けなしで結
\&    果出力される。
\&    (Calc_Imp.pm ver.2.00 から膠着言語の明示的な設定が必要になった）
.Ve
.PP
.Vb 1
\&         $obj\->IsAgglutinativeLang;                    ($objはオブジェクト)
.Ve
.PP
.Vb 3
\&      また、次のメソッドを使い重要度計算を行わない語（"of"のように他の語と
\&    多数の組み合わせができてしまう語）を登録することもできる。
\&         $obj\->IgnoreWords(\(aq単語Ａ\(aq, \(aq単語Ｂ\(aq ...);  ($objはオブジェクト)
.Ve
.PP
.Vb 2
\&      (Calc_Imp.pm の ver.1.xx では配列 @TermExtract::Calc_Imp::IgnoreWords
\&       で指定していたが、ver.2.00 から上記の方式に変更）
.Ve
.PP
.Vb 4
\&      １バイトの数値は重要度計算の対象から外した（単位を示す語の重要度が高
\&    くなりすぎることを防ぐため）。
\&      １バイト数値と、$obj\->IgnoreWords の語が単語で現れた場合は、連接統計
\&    情報を常に１とするが、用語の抽出は行う。
.Ve
.SH "INSTALL"
.IX Header "INSTALL"
.Vb 7
\&    このモジュールを「学習機能」とDF(Document Frequency)を用いた重要度
\&  計算をサポートしている。その学習用には学習用のDBファイルが必要である。
\&    DBファイルは、Perlの DB_File モジュール（バークレーDB）の使用を推奨
\&  している。もし、DB_Fileが使えない場合は、SDBM_File を使うよう設定
\&  ($obj\->use_SDBM) できるが、単名詞の連接統計DB（学習機能用DB）の文字コ
\&  ード順表示、前方一致検索の機能は使えない。
\&    バージョン 5 のPerl（JPerlを含む)で動作する。
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Vb 1
\&    以下のメソッドが使用可能である
.Ve
.Sh "new"
.IX Subsection "new"
.Vb 3
\&    コンストラクタ・メソッド。
\&    新たに ExTerm::Calc_Imp （か、その派生クラス）のオブジェクトを作成し
\&  、そのオブジェクトを返す。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj = TermExtract::AnyClass\->new;
.Ve
.PP
.Vb 1
\&            ※ TermExtract::AnyClassは派生クラス
.Ve
.Sh "get_imp_word"
.IX Subsection "get_imp_word"
.Vb 4
\&    専門用語の重要度を計算し、専門用語と重要度（数値）の２要素からなる
\&  配列を重要度の高い順に返す。
\&  （パラメータ省略時は、前回の入力を使う、重要度の計算モードはそのつど
\&  セット可能）
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 5
\&        @result = $obj\->get_imp_word(Parameter_1, Parameter_2, ... Parameter_N);
\&        foreach (@result) {
\&            print $_\->[0], "\et";    # 専門用語
\&            print $_\->[1], "\en":    # 専門用語の重要度
\&        }
.Ve
.Sh "use_total"
.IX Subsection "use_total"
.Vb 3
\&    重要度計算において、連接語の重みを、連接した単語の延べ数で計算する。
\&　  例えば、統計データで、「情報」という語が「科学」の前に２回、「技術」
\&  の前に３回連接したとすると。連接語の重みは次のとおり計算される。
.Ve
.PP
.Vb 1
\&    ５回　 （「科学」２回　＋　「技術」３回）
.Ve
.PP
.Vb 2
\&      ＊正確には相乗平均をとる際、０回の単名詞を扱う関係から１を加算した
\&        値を用いる
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_total;
.Ve
.Sh "use_uniq"
.IX Subsection "use_uniq"
.Vb 3
\&    重要度計算において、複合語の重みを、単語の種類数でとるモードにする。
\&　  例えば、統計データで、「情報」という語が「科学」の前に２回、「技術」
\&  の前に３回連接したとすると。複合語の重みは次のとおり計算される。
.Ve
.PP
.Vb 1
\&    ２回　 （「科学」　＋　「技術」の２種）
.Ve
.PP
.Vb 2
\&      ＊正確には相乗平均をとる際、０回の単名詞を扱う関係から１を加算した
\&        値を用いる
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_uniq;
.Ve
.Sh "use_Perplexity"
.IX Subsection "use_Perplexity"
.Vb 12
\&    重要度計算において、複合語の重みを、パープレキシティでとるモードにする。
\&    なお、現在の仕様では、「学習機能」と組み合わせて使うことはできない。現在
\&  パープレキシティによる重要度計算は、「学習機能」をサポートしていない。その
\&  ため、自動的に「学習機能」を使わない重要度計算が行われる。
\&  　パープレキシティは情報理論で使われる指標で、このシステムの場合は各単名詞
\&  に「情報理論的に見ていくつの単名詞が連接可能か」を示している。これは、以下
\&  のようにして求まる単名詞のエントロピーを元に、２のべき乗することで求められ
\&  る。
\&    連接する語のそれぞれの出現確率をP1～Pnとおくと、エントロピーの計算は次の
\&　ように示せる。なお対数の底は２である。
\&　             
\&    (\-1 * P1 * log(P1)) + (\-1 * P2 * log(P2)) ....... + (\-1 * Pn * log(Pn))
.Ve
.PP
.Vb 3
\&    例えば、統計データで、「情報」という語が「科学」の前に２回、「技術」の
\&  前に３回連接（あわせると計５回連接）したとすると。単名詞のエントロピーは
\&  次のとおりになる。出現確率は「科学」が 2/5, 「技術」が 3/5 である。
.Ve
.PP
.Vb 1
\&     (\-2/5 * log(2/5)) + (\-3/5 * log(3/5))
.Ve
.PP
.Vb 8
\&    パープレキシティそのもの計算は計算機に負荷がかかるため、重要度の比較に支
\&  障がないレベルで計算を抑える。これは、パープレキシティの値ではなく、２を底
\&  にしたパープレキシティの対数を出すことで実現できる（対数でも重要度の順序に
\&  は影響しない）。
\&    重要度を２を底にした対数で出すことにより、「相乗平均」と「出現頻度の掛け
\&  合わせ」は次の計算になる。
\&    複合語内の相乗平均 \-\-\-  各単名詞のエントロピーの合計 / (単名詞数 x 2）
\&    出現頻度　\-\-\-\-\-\-\-\-\-\-\-\-  出現頻度の対数（底は2)を加算
.Ve
.PP
.Vb 2
\&    なお、対数の計算では 0log(0) → 0 とした。この際に log(1) → 0 と差が出なく
\&  なるため、log(n) の計算を log(n+1) とすることでスムージングを行った。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_Perplexity;
.Ve
.Sh "no_LR"
.IX Subsection "no_LR"
.Vb 2
\&    重要度計算において、複合語の重みを使わないモードにする。頻度の情報
\&  (Frequency, TF)やIDF(Inverted Ducoment Frequency) のみ有効になる。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->no_LR;
.Ve
.Sh "use_freq"
.IX Subsection "use_freq"
.Vb 1
\&    重要度を用語の出現頻度でとるモードにする。Frequency による重要度計算モード。
.Ve
.Sh "use_TF"
.IX Subsection "use_TF"
.Vb 2
\&    重要度を用語の出現頻度でとるモードにする。ただし、用語が他の用語の一部と
\&  して現れた場合もカウントする。Term Frequency (TF)による重要度計算モード。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_TF;
.Ve
.Sh "with_idf"
.IX Subsection "with_idf"
.Vb 4
\&    他の重要度計算結果に対し、IDF (Inverted Document Frequency) にて補正する。
\&  事前に $obj\->use_storage_df; にて、対象ドキュメントのDF(Document Frequency)
\&  の統計をとっておく必要がある。
\&        IDFの計算は、log (総文献数　/ 該当の用語を含む文献数)+1　にて行う。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->with_idf;
.Ve
.Sh "use_frq"
.IX Subsection "use_frq"
.Vb 3
\&    重要度計算において、ドキュメント中の専門用語の出現頻度を掛けるモード
\&  にする。
\&    デフォルトはこのモード。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_frq;
.Ve
.Sh "no_frq"
.IX Subsection "no_frq"
.Vb 2
\&    重要度計算において、複合語の連接情報のみで計算する（ドキュメント中の
\&  専門用度の出現頻度を考慮しない）モードにする。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->no_frq;
.Ve
.Sh "use_stat"
.IX Subsection "use_stat"
.Vb 9
\&    重要度計算において、学習機能（単名詞ごとの連接統計DBの情報）を使うモ
\&  ードにする。
\&    重要度計算において、単名詞の連接情報は、元となるデータが多いほど正確
\&  な統計データが得られると推測される。この学習機能は、いままでに処理対象
\&  としたテキストから単名詞の連接情報を蓄積し、重要度計算で用いるものであ
\&  る。
\&     ただし、PerlのDBMが使えない環境では、自動的に学習機能がOFFになる。
\&    $obj\->use_storage （新規ドキュメントの単名詞の連接情報DBへの追加）と
\&  合わせて使用する。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_stat;
.Ve
.PP
.Vb 1
\&    sample :
.Ve
.PP
.Vb 3
\&        $obj\->use_stat;
\&        $bbj\->use_storage;
\&        $obj\->get_imp_word();
.Ve
.Sh "no_stat"
.IX Subsection "no_stat"
.Vb 4
\&    重要度計算において、ドキュメント中の情報のみ使用（学習機能を使わない
\&  ）モードにする。use_stat メソッドの項を参照。学習機能用データベースの
\&  蓄積をとめる場合は、$obj\->no_storage; を使用する。
\&    デフォルトはこのモード(ver 4.02 より)。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->no_stat;
.Ve
.PP
.Vb 1
\&    sample :
.Ve
.PP
.Vb 3
\&        $obj\->no_stat;
\&        $bbj\->no_storage;
\&        $obj\->get_imp_word();
.Ve
.Sh "agverage_rate"
.IX Subsection "agverage_rate"
.Vb 5
\&    重要度計算で、「ドキュメント中の用語の頻度」と「単名詞の連接回数の相
\&  乗平均」のバランスを調整するためのメソッド。
\&    重要度計算でドキュメントの中の頻度を使用するモード（デフォルト）にし
\&  たときのみ、動作する。
\&    デフォルトの値は１。数値以外と 0 は受け付けない。
.Ve
.PP
.Vb 2
\&    値を大きくとる　→　ドキュメント中の用語の頻度の比重が高まる
\&    値を小さくとる  →　単名詞の連接回数の重要度の比重が高まる
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->average_rate($Any_numeric_value);
.Ve
.Sh "reset_get_word"
.IX Subsection "reset_get_word"
.Vb 5
\&    "get_imp_word"メッソッドは、引数なしの場合、データの再読み込みを行わ
\&  ない。
\&    このメソッドはそれを強制的に再読み込みをさせるための機能である。派生
\&  クラスでメソッド get_noun_word  が引数をとらずとも動くよう設計されてい
\&  る場合のみ意味を持つ。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->reset_get_word;
.Ve
.PP
.Vb 1
\&    sample :
.Ve
.PP
.Vb 1
\&        @result1 = $obj\->get_imp_word();
.Ve
.PP
.Vb 3
\&        # 再度、get_imp_word の実装にそって、データを取り込む
\&        $obj\->reset_get_word;
\&        @result2 = $obj\->get_imp_word();
.Ve
.Sh "result_filter"
.IX Subsection "result_filter"
.Vb 3
\&    "get_imp_word"の戻り値（配列）同士の掛け合わせを行う。
\&    戻り値は get_imp_word の戻り値と同じ形式の配列になる。
\&    メッソッドのパラメータ指定法は次のとおり。
.Ve
.PP
.Vb 4
\&      第１引数   \-\-\-\-\-   専門用語リストＡ
\&      第２引数   \-\-\-\-\-   専門用語リストＢ
\&      第３引数   \-\-\-\-\-   専門用語リストＡ の上位何件まで使用するか指定
\&      第４引数   \-\-\-\-\-   専門用語リストＢ の上位何件まで使用するか指定
.Ve
.PP
.Vb 2
\&        ※　第３引数と第４引数は省略可。省略した場合は、それぞれ
\&          "100000"（実質無制限）がセットされる。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        @list = $obj\->result_filter(\e@list_a, \e@list_b, $limit_a, $limit_b);
.Ve
.PP
.Vb 1
\&    sample :
.Ve
.PP
.Vb 2
\&        $obj\->use_total;
\&        @result1 = $obj\->get_imp_word();
.Ve
.PP
.Vb 2
\&        $obj\->no_LR;
\&        @result2 = $obj\->get_imp_word();
.Ve
.PP
.Vb 1
\&        @result3 = $self\->result_filter(\e@result1, \e@result2, 30, 30);
.Ve
.Sh "stat_db"
.IX Subsection "stat_db"
.Vb 3
\&    単名詞ごとの連接情報を蓄積するDBファイル名を指定する。
\&    デフォルトは stat.db
\&    引数なしで呼び出した場合は、現在設定されているDBファイル名を返す。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->stat_db("AnyFileName");
.Ve
.Sh "comb_db"
.IX Subsection "comb_db"
.Vb 4
\&    ２語の単名詞の組とその出現頻度（延べ数と異なり数）を蓄積するDBファイ
\&  ル名を指定する。
\&    デフォルトは comb.db
\&    引数なしで呼び出した場合は、現在設定されているDBファイル名を返す。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->comb_db("AnyFileName");
.Ve
.Sh "comb_r_db"
.IX Subsection "comb_r_db"
.Vb 6
\&    ２語の単名詞の組とその頻度を蓄積したDBファイルから、２語の単名詞の組
\&  の前後を逆にしたDBを作成する際の、ファイル名を指定する。
\&    単名詞の統計情報を解析するためだけに使用するので、必須の設定ではない
\&  。このDBはメソッド make_comb_rev を使うことで初めて作成される。
\&    デフォルトは comb_r.db
\&    引数なしで呼び出した場合は、現在設定されているDBファイル名を返す。
.Ve
.PP
.Vb 1
\&    usege :
.Ve
.PP
.Vb 1
\&        $obj\->comb_r_db("AnyFileName");
.Ve
.Sh "df_db"
.IX Subsection "df_db"
.Vb 3
\&    DF(Document Frequency)用のDBファイル名を指定する。
\&    デフォルトはdf.db
\&    引数なしで呼び出した場合は、現在設定されているDBファイル名を返す。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->df_db("AnyFileName");
.Ve
.Sh "use_storage"
.IX Subsection "use_storage"
.Vb 1
\&    単名詞の連接情報DBへデータ蓄積を行うモードにする。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_storage;
.Ve
.PP
.Vb 1
\&    sample :
.Ve
.PP
.Vb 3
\&        $obj\->use_stat;
\&        $bbj\->use_storage;
\&        $obj\->get_imp_word();
.Ve
.Sh "no_storage"
.IX Subsection "no_storage"
.Vb 4
\&    単名詞の連接統計DBへのデータ蓄積を行わないモードにする。デフォルト
\&  はこのモード。
\&    重要度計算で、学習機能を使うときは、このモードにしないほうが無難。
\&    処理対象にDBに登録されていない語が含まれていると正しく動作しない。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->no_storage;
.Ve
.PP
.Vb 1
\&    sample :
.Ve
.PP
.Vb 3
\&        $obj\->no_stat;
\&        $bbj\->no_storage;
\&        $obj\->get_imp_word();
.Ve
.Sh "use_storage_df"
.IX Subsection "use_storage_df"
.Vb 2
\&    DF(Document Frequency)用のDBへデータ蓄積を行うモードにする。この
\&  モードの間は、データの蓄積のみで重要度計算は行わない。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_df_storage_df;
.Ve
.Sh "no_storage_df"
.IX Subsection "no_storage_df"
.Vb 3
\&    単名詞の連接統計DBへのデータ蓄積を行わないモードにする。デフォルト
\&  はこのモード。
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->no_df_storage_df;
.Ve
.Sh "use_SDBM"
.IX Subsection "use_SDBM"
.Vb 3
\&    単名詞の連接統計DBのデフォルトはBerkeley DBだが、これをSDBMに変更
\&  する。
\&    (Berkeley DBは環境によっては使えないが、SDBM は常に使用可能)
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->use_SDBM;
.Ve
.Sh "lock_dir"
.IX Subsection "lock_dir"
.Vb 10
\&    このモジュールでは、統計DBの整合性を保つためのロック用ディレクトリを
\&  使用している。
\&    このメソッドは、そのロック用ディレクトリのディレクトリ名を設定する。
\&    空文字列（Null値）をセットした場合は、ロックしない。
\&    デフォルトでは、空文字列をセット。よってロックは行われない。
\&    引数なしで呼び出した場合は、設定されているディレクトリ名を返す。
\&    プログラムの異常終了時にはロックを開放するようになっているが、プロセ
\&  スの強制停止の際には、最悪ロック用ディレクトリが残ってしまう可能性があ
\&  る。ユーザプログラム側で次のようなコーディングをすることで、プロセスの
\&  強制終了（端末からの \(aqctrl\(aqキー + \(aqC\(aqキー等）にある程度対応できる。
.Ve
.PP
.Vb 1
\&      =====================================================
.Ve
.PP
.Vb 2
\&      # プロセスの異常終了時処理
\&      $SIG{INT} = $SIG{QUIT} = $SIG{TERM} = \(aqsigexit\(aq;
.Ve
.PP
.Vb 1
\&           Any Code ................
.Ve
.PP
.Vb 4
\&      # プロセスの異常終了時にDBのロックを解除
\&      sub sigexit {
\&         $obj\->unlock_db;
\&      }
.Ve
.PP
.Vb 1
\&     =======================================================
.Ve
.PP
.Vb 2
\&    これでもロックが残る可能性がある。その際は、OSからロックディレクトリ
\&  を削除すること。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->lock_dir("AnyDirName");
.Ve
.Sh "lock_db"
.IX Subsection "lock_db"
.Vb 6
\&    統計DBをロックする（ロック用ディレクトリを作成）。
\&    既にDBがロックされている場合は、1システム秒おきに5回までロックを試み
\&  る。それでも、ロックされたままの場合は、戻り値として 0 を返す。
\&　　ロックに成功した場合は、戻り値として 1 を返す。
\&    なお、このメソッドはメソッド lock_dir で値がセットされた場合のみ動作
\&  する。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->lock_db;
.Ve
.Sh "unlock_db"
.IX Subsection "unlock_db"
.Vb 1
\&    統計DBのロックを解除する（ロック用ディレクトリの削除）。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->unlock_db;
.Ve
.Sh "db_locked"
.IX Subsection "db_locked"
.Vb 2
\&    統計DBをロックしたかどうかを返す。
\&    ロックしているなら真(1)を返す
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->db_locked;
.Ve
.Sh "dump_stat_db"
.IX Subsection "dump_stat_db"
.Vb 5
\&    単名詞の連接統計DBの内容を標準出力に出す。
\&      １）引数なしの場合、全件出力する
\&      ２）第１引数ありの場合、その引数の前方一致データを出力する
\&      ３）第２引数が真の場合、第１引数の完全一致データを出力する
\&    なお、出力フォーマットは次のとおり。
.Ve
.PP
.Vb 1
\&        単名詞[タブ]数値１[空白]数値２[空白]数値３[空白]数値４
.Ve
.PP
.Vb 4
\&          数値１ \-\- 単名詞の前にいくつの語をとるか（異なり数）
\&          数値２ \-\- 　　　　　　〃　　　　　　　　（延べ数）
\&          数値３ \-\- 単名詞の後にいくつの語をとるか（異なり数）
\&          数値４ \-\- 　　　　　　〃　　　　　　　　（延べ数）
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->dump_stat_db($Any_key_word);
.Ve
.Sh "dump_comb_db"
.IX Subsection "dump_comb_db"
.Vb 5
\&    既出の連接語とその頻度をおさめるDBの内容を表示する。
\&      １）引数なしの場合、全件出力する
\&      ２）第１引数ありの場合、その引数の前方一致データを出力する
\&      ３）第２引数が真の場合、第１引数の完全一致データを出力する
\&    なお、出力フォーマットは次のとおり。
.Ve
.PP
.Vb 1
\&        単名詞１[空白]単名詞２[タブ]単名詞の組み合わせの延べ数
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->dump_comb_db($Any_key_word);
.Ve
.Sh "dump_comb_r_db"
.IX Subsection "dump_comb_r_db"
.Vb 6
\&    既出の２語の単名詞の組とその出現頻度をおさめるDB（逆順）の内容
\&  を表示する。
\&      １）引数なしの場合、全件出力する
\&      ２）第１引数ありの場合、その引数の前方一致データを出力する
\&      ３）第２引数が真の場合、第１引数の完全一致データを出力する
\&    なお、出力フォーマットは次のとおり。
.Ve
.PP
.Vb 1
\&        単名詞１[空白]単名詞２[タブ]単名詞の組み合わせの延べ数
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->dump_comb_r_db($Any_key_word);
.Ve
.Sh "make_comb_rev"
.IX Subsection "make_comb_rev"
.Vb 4
\&    既出の２語の単名詞の組とその出現頻度をおさめるDB（逆順）を作成（もし
\&  くは更新）する。
\&    重要度計算では使用しないが、ある単名詞の前にどの単名詞が結びつきうる
\&  かの統計情報を得ることができる。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->make_comb_rev;
.Ve
.Sh "dump_df_db"
.IX Subsection "dump_df_db"
.Vb 1
\&    DF(Document Frequency)用の統計データの内容を表示する。
.Ve
.PP
.Vb 1
\&        単名詞１[空白]単名詞２[空白] ....[タブ]用語を含むドキュメント数
.Ve
.PP
.Vb 1
\&        [空白]の場合は、いままで読み込んだ総ドキュメント数
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->dump_df_db($Any_key_word);
.Ve
.Sh "clear_db"
.IX Subsection "clear_db"
.Vb 2
\&    単名詞の連接統計DBと、既出の２語の単名詞の組とその出現頻度をおさめる
\&  DBの内容をクリアする。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->clear_db;
.Ve
.Sh "clear_df_db"
.IX Subsection "clear_df_db"
.Vb 1
\&    DF(Document Frequency)用統計DBの内容をクリアする。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->clear_df_db;
.Ve
.Sh "IgnoreWords"
.IX Subsection "IgnoreWords"
.Vb 4
\&      重要度が低いにもかかわらず、単語の連接で頻出する語（例えば、英語の
\&   ofなど）を重要度の計算対象外にする。
\&     ユーザプログラムではなく、派生クラスでの使用のために用意した。
\&     (BrillsTagger.pm, EnglishPlainText.pm などで使用している）
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->IgnoreWords(\(aq単語A\(aq, \(aq単語B\(aq, ...);
.Ve
.PP
.Vb 1
\&      引数を与えないと、現在の設定値（配列）を返す。
.Ve
.Sh "IsAgglutinativeLang"
.IX Subsection "IsAgglutinativeLang"
.Vb 7
\&    言語を膠着言語や孤立語（日本語や中国語などの文字空けで単語区切されない
\&  言語）に設定する。ユーザプログラムではなく、派生クラスでの使用のために用
\&  意した。
\&    Calc_Imp.pm の ver 2.00 以降では、処理対象言語が膠着言語か孤立語の場合、
\&  このメソッドの使用が必要。(Chasen.pm, ICTCLAS.pm などで使用している）
\&    このメソッドを使用しないと、入力を屈折語（デフォルト）として扱い
\&  、単名詞を半角スペースで区切った形での出力になる。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->IsAgglutinativeLang;
.Ve
.Sh "NotAgglutinativeLang"
.IX Subsection "NotAgglutinativeLang"
.Vb 3
\&    言語を屈折語（英語など文字空けで単語が区切られている言語）に設定
\&  する。ユーザプログラムではなく、派生クラスでの使用のために用意した。
\&    デフォルトは非膠着言語のため、通常は使用する必要はない。
.Ve
.PP
.Vb 1
\&    usage :
.Ve
.PP
.Vb 1
\&        $obj\->NotAgglutinativeLang;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 9
\&    TermExtract::Chasen
\&    TermExtract::MeCab
\&    TermExtract::BrillsTagger
\&    TermExtract::EnglishPlainText
\&    TermExtract::ChainesPlainTextUC
\&    TermExtract::ChainesPlainTextGB
\&    TermExtract::ICTCLAS
\&    TermExtract::JapanesePlainTextEUC
\&    TermExtract::JapanesePlainTextSJIS
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 5
\&      このプログラムは、東京大学・中川裕志教授、横浜国立大学・森辰則助教
\&    授が作成した「専門用語自動抽出システム」のExtract.pm  を参考に、中川
\&    教授の教示を受け、１からコーディングし直したものである。
\&      この作業は、東京大学・前田朗(maeda@lib.u\-tokyo.ac.jp)が行った。
\&      その際のコンセプトは次のとおり。
.Ve
.PP
.Vb 2
\&      １．形態素解析データの取り込みも含めてモジュール化し、他のプログラ
\&        ムへの組み込みができること
.Ve
.PP
.Vb 1
\&      ２．学習機能（連接語統計情報のDBへの蓄積とその活用）を持つこと
.Ve
.PP
.Vb 1
\&      ３．重要度計算方法の切り替えができること
.Ve
.PP
.Vb 2
\&      ４．日本語パッチを当てたPerl (Jperl) だけではなく、オリジナルの
\&        Perlで動作すること
.Ve
.PP
.Vb 2
\&      ５．信頼性の確保のためPerlのstrictモジュール及びperlの\-wオプション
\&        に対応すること
.Ve
.PP
.Vb 1
\&      ６．「窓関数」による、不要語の削除ルーチンをとりはずすこと
.Ve
.PP
.Vb 4
\&      ７．単名詞の連接回数の相乗平均を正しくとること。Extract.pmは連接回
\&        数の２乗を重要度としていた。
\&          なお、この設定はパタメータにより調整できる。Extract.pmと同じに
\&        するには、$obj\->average_rate(0.5) とする
.Ve
.PP
.Vb 1
\&      ８．数値と任意の語を重要度計算の対象からはずせるようにすること
.Ve
.PP
.Vb 1
\&      ９．多言語に対応するため、Unicode(UTF\-8)で動作すること
.Ve
.PP
.Vb 1
\&      １０．パープレキシティを元に重要度計算を行えるようにすること。
.Ve
.PP
.Vb 1
\&      １１．Frequency, TF, TF*IDFなどの重要度計算機能を持つこと
.Ve
.PP
.Vb 1
\&      Extract.pm の作者は次のとおり。
.Ve
.PP
.Vb 3
\&        Keisuke Uchima 
\&        Hirokazu Ohata
\&        Hiroaki  Yumoto (Email:hir@forest.dnj.ynu.ac.jp)
.Ve
.PP
.Vb 2
\&        なお、本プログラムの使用において生じたいかなる結果に関しても当方
\&      では一切責任を負わない。
.Ve
